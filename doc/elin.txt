*elin.txt*            Extensible Lisp Integration for Neovim          *elin* >
                                 ,dPb,    |
                                 IP"Yb   -*-
                        |        I8 8P gg |
                       -*-       db 8I ""             |
                        |  ,gg,  d8 8" gg  ,gg, ,gg  -*-
                          i8" 8i I8dP  88 ,8PY8YP"g8, |
                          8I ,8I I8P   d8 I8  8I   8i
                        _,Igd8P,,d8b,_,88,dP  8I   "8,
                       888P""Y888P'"Y8P""8P'  8I    "8i
<                             for Neovim +v0.8.0
==============================================================================
About                                                           *elin-about*

Elin enhances neovim with seamless fennel configuration. Just write `.fnl`
files where you would normally write `.lua` or `.vim` files For more info,
see |elin-config|.

Fennel is a lisp that compiles directly to lua or evaluates fennel using a lua
interpreter. Elin uses neovim's |lua-luajit| to bootstrap fennel on top and
tries to make it as comfortable to use `.fnl` files as it is to use `.lua`
files everywhere.

There are also some nice commands for evaluating fennel in various ways. Check
out |fennel-commands|.

See |elin-api.txt| for elin's api used in |compile-nvim|.

==============================================================================
Compile Neovim                                  *use-elin-rtp*  *compile-nvim*

  -------------------------------- WARNING: --------------------------------
                                  DO NOT USE
    This is not fully implemented. It will cause duplicate loading during
     INIT and ftplugin because elin will load the fennel and neovim will
     load the lua file. This functionality and the documentation serve as
                                stubs for now.
  -------------------------------- WARNING: --------------------------------

If you want to use compiled lua files in elin-rtp, use >fennel
  ;; init.fnl
  (let [{: compile-nvim : use-elin-rtp}]
    (compile-nvim)
    (use-elin-rtp))

Respectively, these commands backup elin-rtp then one-shot compile all fennel
files to elin-rtp (via |elin.compile-all|) and add elin's rtp cache to nvim's
'rtp'.

Elin's rtp cache is located at the following directory:     *elin-rtp* >fennel
  (.. (vim.stdpath :cache) :/elin-rtp/)
==============================================================================
Elin Configuration                                               *elin-config*

Note: Here {config} is the equal to what you see when you do: >vim
        :echo stdpath("config")  " ~/.config/nvim on unix-y systems

Note: INIT below refers to elin's initialization, which happens when
      `plugin/startup.lua` is loaded during nvim's |startup|.

If you are already familiar with vim's directory structure, then all you need
to know is that anywhere you can use a `.lua` or `.vim` file, you can use a
`.fnl` file instead, and elin will use it appropriately. This does not apply
to `colors/*.fnl` because we cannot intercept |:colorscheme| on |E185|.

init.fnl, plugin, and lsp files are sourced in order during INIT:
1. |init.fnl|          one file
2. |plugin.fnl|        any depth
3. |after-plugin.fnl|  any depth
4. |lsp.fnl|           depth=1

When filetype is set, ftplugins and syntax are triggered:
1. |undo_ftplugin_fnl|
3. |ftplugin.fnl|
4. |after-ftplugin.fnl
5. |syntax.fnl|
6. |after-syntax.fnl


{config}/init.fnl                                                   *init.fnl*

  If there is no |init.lua| or |init.vim|, elin will load |init.fnl| if it
  exists. Ie, |init.fnl| has the lowest priority. This can't happen during
  |startup|, but it does happen just after.

  If you want to change the defaults, use |elin.setup|. Eg: >fennel
    ;; init.fnl
    (let [{: setup} (require :elin)]
      (setup {:verbose false}))
    (require :say-hi)


{config}/plugin/**/*.fnl                                          *plugin.fnl*
{config}/after/plugin/**/*.fnl                              *after-plugin.fnl*

  Plugins are loaded during INIT: >fennel
    ;; plugin/opts.fnl
    (set [vim.o.ts vim.o.sts vim.o.et vim.o.sw] [2 2 true 0])
<
  Disable with |--noplugin| or 'loadplugins'.  Since, |init.fnl| is loaded
  first, you can disable them if desired: >fennel
    ;; init.fnl
    (set vim.o.loadplugins false)


{config}/lsp/*.fnl                                                   *lsp.fnl*

  LSP configurations are extracted and loaded via |vim.lsp.config|: >fennel
    ;; lsp/fennel_ls.fnl
    {:lua-version :intersection :lints {:not-enough-arguments true}}


b:undo_ftplugin_fnl                                        *undo_ftplugin_fnl*
b:undo_ftplugin_lua                                        *undo_ftplugin_lua*

  Set b:undo_ftplugin_fnl to a fennel expression (string) or fennel function
  (lua). b:undo_ftplugin_lua is the same but for lua expressions and
  functions. See just below for example usage.


{config}/ftplugin/*.fnl                                         *ftplugin.fnl*
{config}/after/ftplugin/*.fnl                             *after-ftplugin.fnl*

  A corresponding filetype plugin is loaded when 'filetype' is set where `*`
  is the 'filetype': >fennel
    ;; after/ftplugin/fennel.fnl
    (set vim.bo.formatprg "fnlfmt -")
    (set vim.b.undo_ftplugin_fnl "(set vim.bo.fp nil)")
<
  To disable (see |:filetype-plugin-off|, |:filetype-indent-off|): >fennel
    ;; init.fnl
    (vim.cmd.filetype "plugin off") ;; disables BOTH ftplugin/ AND indent/
    (vim.cmd.filetype "indent off") ;; disables indent/
    ;; Note: these disable for .lua, .vim, and .fnl files
<
  Warning: a 'filetype' with a "." is not supported yet but will be soon!


{config}/syntax/*.fnl                                             *syntax.fnl*
{config}/after/syntax/*.fnl                                 *after/syntax.fnl*

  This isn't very useful because LSP replaced it :) >fennel
    ;; after/syntax/fennel.fnl
    (vim.opt_local.iskeyword:remove 45) ;; remove "-" from &isk (don't)
    (vim.cmd.syntax "keyword FennelSpecialForm vim")
<
  Disable syntax (see |syntax-off|): >fennel
    ;; init.fnl
    (vim.cmd.syntax :off)
    ;; Note: this disables syntax for .lua, .vim, and .fnl files

==============================================================================
Fennel Commands                                              *fennel-commands*

Note: :Fnl* commands gobble |bar| like commands listed in |:bar|.


:Fnl[!] [{redir}] {expr}                                                *:Fnl*
                        Evaluate {expr} as a fennel expression using the
                        fennel interpreter.

                        [!] alters how the `result` is printed.
                        Without [!] the result is printed with with `=>`
                        prefix like "=> result". With it, no arrows are
                        printed.

                        Note: This is still a work in progress as each {redir}
                        should have its own default and [!] can alter how it
                        is displayed. It applies to all commands below. We
                        actually probably want to parse our own indicators.
                        Eg, sometimes we should use fennel.view(). Sometimes,
                        we should prepend a comment (referencing &filetype).
                        Etc.

                        If {redir} is not specified, the `result` is printed
                        to the cmdline. Otherwise, {redir} specifies if the
                        `result` should into a register, a file, a vim or lua
                        variable, or the current buffer. See |:redir|, which
                        shares most of the syntax and ability. See
                        |:Fnl-redir|.


:FnlFiles[!] [{redir}] {file} [{file} ...]                         *:FnlFiles*
                        Evaluate all {file}s as one fennel expression using
                        the fennel interpreter.

                        [!] alters how the `result` is printed.
                        Without [!] the result is printed with with `=>`
                        prefix like "=> result". With it, no arrows are
                        printed.

                        {redir} applies as with |:Fnl| if specified.


:{range}FnlLines[!] [{redir}]                                      *:FnlLines*
                        Evaluate {range} (default current line) as a fennel
                        chunk.

                        [!] alters how the `result` is printed.
                        Without [!] the result is printed with with `=>`
                        prefix like "=> result". With it, no arrows are
                        printed.

                        {redir} applies as with |:Fnl| if specified.

:[{range}]FnlSwiss[!] [{files}] [{redir}] [{files}] [{expr}]       *:FnlSwiss*
                        This is all of the above commands merged into one
                        tool: a multi-tool. Just like a Swiss army knife, it
                        seems cool; but probably no one will ever need or want
                        to use it.

                        [!] alters how the `result` is printed.
                        Without [!] the result is printed with with `=>`
                        prefix like "=> result". With it, no arrows are
                        printed.

                        {range} can be provided like with |:FnlLines|.

                        {files} can be provided like with |:FnlFiles|.
                        However, each file must be `<` (and optional space)
                        and can only come just before and/or after {redir}.

                        {expr} can be provided like with |:Fnl|.

                        If any are specified, FnlSwiss evaluates the {range}
                        first, then all {files} in order, and finally any
                        {expr}s.

                        {redir} applies as with |:Fnl| if specified.


                                                                  *:Fnl-redir*
{redir} applies to |:Fnl|, |:FnlFile|, |:FnlLines|, and |:FnlSwiss|. It must
be specified before the {expr}. Here is a list of all redirs:

  :Fnl > {file} {expr}     (Always) Write result to {file}.
                          Note: [!] doesn't work like |:redir|
  :Fnl >> {file} {expr}    Append result to {file}

  :Fnl @{a-zA-Z}> {expr}   Save result to register {a-z}; append if {A-Z}
  :Fnl @{a-zA-Z} {expr}    Same as above (compat)
  :Fnl @{a-z}>> {expr}     Append result to register {a-z}

  :Fnl @{*+"}> {expr}      Save result to `*`, `+`, or `"` register
  :Fnl @{*+"} {expr}       Same as above (compat)
  :Fnl @{*+"}>> {expr}     Append result `*`, `+`, or `"` register
                          See |quotestar|, |quote+|, and |quotequote|

  :Fnl => {var} {expr}     Save result to g:{var} (vim global variable)
  :Fnl =>> {var} {expr}    Append result to g:{var}

  The rest are not specified by |:redir| but are supported by |:Fnl|:

  :Fnl -> {var} {expr}     Save result to _G.{var} (lua global variable)
  :Fnl ->> {var} {expr}    Append result to _G.{var}

  :Fnl @_ {expr}           Disregard result (use "black hole" register)
  :Fnl == {expr}           |:put| result

Synopsis:
    {redir}  Description ~
   > {file}  write `result` to file {file}
  >> {file}  append `result` to file {file}
        @+>  save `result` to register `@+` (same as @+>)
       @a>>  append `result` to register `@a` (same as @A)
   => {var}  save `result` to vim variable `g:`{var}
  =>> {var}  append `result` to vim variable `g:`{var}
   -> {var}  save `result` to lua variable `_G.`{var}
  ->> {var}  append `result` to lua variable `_G.`{var}
         @_  don't print or store `result` (black hole
         ==  |:put| result on new line

Examples: >vim
  " say hi; store "bar" into vim.g.foo
  :Fnl => foo (print "hello from fennel") "bar"
  " evaluate paragraph with fennel and put on next line commented
  :'{,'}FnlLines ==
  " evaluate ~/fennel-test.fnl into @+ register
  :FnlFiles @+> ~/fennel-test.fnl
  " eval from line to end of buffer and file ~/utils.fnl; store 9 into _G.Res
  :.,$FnlSwiss -> Res < ~/utils.fnl (sum 2 3 4)

==============================================================================
<3                                                             *elin-thanks*

A special thanks to the fennel contributors and hotpot.nvim for the hard work
necessary to make this project viable and inspiration. Thanks also to
fennel-ls and fennel-ls-nvim-docs.

https://fennel-lang.org/                              |
https://git.sr.ht/~xerool/fennel-ls                  -*-
https://github.com/rktjmp/hotpot.nvim                 |
https://dev.fennel-lang.org/wiki/WikiStart
https://git.sr.ht/~micampe/fennel-ls-nvim-docs

Thanks also to other projects that bring fennel into neovim. You all make the
fennel ecosystem a little brighter.
                                              |
https://github.com/Olical/aniseed            -*-
https://github.com/gpanders/nvim-moonwalk     |                    |
https://github.com/alexaandru/fennel-nvim                         -*-
https://github.com/udayvir-singh/tangerine.nvim                    |

==============================================================================
Lore                                                             *elin-lore*

In addition to an acronym, Elin is a name that means "shining" or "brilliant".
In other words, it brings a little light from the world of lisp into neovim.

Conversely, ~evil-mode~ steals some good vim concepts and embeds them into its
dark world of ~emacs~. ;)

Pronounce the plugin name however you want! I pronounce it /ee-lin/ (like
elisp), but the name is probably pronounced /eh-lin/ :)
>
                                |
                         |     -*-
                        -*-     |
                         |                            |
  |                                                  -*-
 -*-                                                  |
  |                                           |
       |                                     -*-
      -*-                                     |                  |
       |                                                        -*-
                                                                 |
< vim:tw=78:ts=2:et:ft=help:norl:
